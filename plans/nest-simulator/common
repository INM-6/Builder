#!/bin/bash
#
# Builder – Compile scripts for local installs of software packages.
# Copyright (C) 2020 Forschungszentrum Jülich GmbH, INM-6
#
# Builder is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Builder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Builder.  If not, see <https://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

# Here are some common definitions for all nest versions.
# Source this file from version specific build plans.

build_package () {
	log_status ">>> build"
	cd "${BUILD}"
	set -x
	# CONFIGURE_OPTIONS variable needs to be split, so no quotes
	# shellcheck disable=SC2086
	cmake ${CONFIGURE_OPTIONS} -DCMAKE_INSTALL_PREFIX:PATH="$TARGET" "$SOURCE" 2>&1 | tee "${LOG}/cmake.log"
	make -j "${MAKE_THREADS:-$(nproc)}" 2>&1 | tee "${LOG}/make.log"
	set +x
}

build_install () {
	log_status ">>> install"
	make install 2>&1 | tee "${LOG}/make-install.log"
	awk 'BEGIN {f=3;x=0}; /^-------/{x=1;if (f>0) f--} f*x' "${LOG}/cmake.log" >"${TARGET}/ConfigurationSummary.txt"
}

build_install_test () {
	log_status ">>> test"

	if [[ "${CMAKEFLAGS}" != *"mpi=ON"* && "${CMAKEFLAGS}" == *"python=OFF"* ]]; then
		make installcheck 2>&1 | tee "${LOG}/make-installcheck.log"
		log_success "installcheck passed." >>"${TARGET}/ConfigurationSummary.txt"
		awk '/Testsuite Summary/{f=1} /Built target/{f=0} f;' "${LOG}/make-installcheck.log" >>"${TARGET}/ConfigurationSummary.txt"
	fi
}

module_install () {
        AUTOMATIC_BUILD_WARNING=" This file was automatically produced by Builder.\n# Any changes may be overwritten without notice.\n#\n# Please see ${BUILDER_PATH} for details."

	PREREQ_DEPENDS="$(module_capture_prereq)"
	if [ -r "${PLAN}.module" ]; then
		module_path="${MODULE_INSTALL_PATH}/${PACKAGE}/${VERSION}/${VARIANT}"
		#PYTHON_SCRIPTS="$(python -c "import sysconfig; print(sysconfig.get_path('scripts'))")"
		#PYTHON_PLATLIB="$(python -c "import sysconfig; print(sysconfig.get_path('platlib'))")"
		#PYTHON_PURELIB="$(python -c "import sysconfig; print(sysconfig.get_path('purelib'))")"
		#PYTHON_SITEPKG="$(python -c "import sysconfig; from pathlib import Path; print(Path(sysconfig.get_path('purelib')).relative_to(sysconfig.get_path('data')))")"
		log_status ">>> installing module file to ${module_path}"
		mkdir -pv "$(dirname "${module_path}")"
		module="$(cat "${PLAN}.module")"
		if version_gt $BASH_VERSION 4.4; then
			echo -e "${module@P}" >"${module_path}"
		else
			# this is a bad substitute for the power of the bash>4.4 notation.
			echo "${module}" | sed \
			    -e 's%\\\$%__NOT_BUILDER_DOLLAR__%g' \
			    -e "s%\${\?AUTOMATIC_BUILD_WARNING}\?%$AUTOMATIC_BUILD_WARNING%g" \
			    -e "s%\${\?BUILDER_PATH}\?%$BUILDER_PATH%g" \
			    -e "s%\${\?PLANFILE_PATH}\?%$PLANFILE_PATH%g" \
			    -e "s%\${\?PACKAGE_CACHE}\?%$PACKAGE_CACHE%g" \
			    -e "s%\${\?SOURCE_PATH}\?%$SOURCE_PATH%g" \
			    -e "s%\${\?BUILD_PATH}\?%$BUILD_PATH%g" \
			    -e "s%\${\?TARGET_PATH}\?%$TARGET_PATH%g" \
			    -e "s%\${\?MODULE_INSTALL_PATH}\?%$MODULE_INSTALL_PATH%g" \
			    -e "s%\${\?LOG_PATH}\?%$LOG_PATH%g" \
			    -e "s%\${\?PACKAGE}\?%$PACKAGE%g" \
			    -e "s%\${\?VERSION}\?%$VERSION%g" \
			    -e "s%\${\?VARIANT}\?%$VARIANT%g" \
			    -e "s%\${\?PLAN}\?%$PLAN%g" \
			    -e "s%\${\?SOURCE}\?%$SOURCE%g" \
			    -e "s%\${\?TARGET}\?%$TARGET%g" \
			    -e "s%\${\?BUILD}\?%$BUILD%g" \
			    -e "s%\${\?LOG}\?%$LOG%g" \
			    -e "s%\${\?PREREQ_DEPENDS}\?%$PREREQ_DEPENDS%g" \
			    -e "s%\${\?VIRTUAL_ENV}\?%${VIRTUAL_ENV:-/}%g" \
			    -e 's%__NOT_BUILDER_DOLLAR__%$%g' \
			       > "${module_path}"
			    #-e "s%\${\?PYTHON_SCRIPTS}\?%$PYTHON_SCRIPTS%g" \
			    #-e "s%\${\?PYTHON_PLATLIB}\?%$PYTHON_PLATLIB%g" \
			    #-e "s%\${\?PYTHON_PURELIB}\?%$PYTHON_PURELIB%g" \
			    #-e "s%\${\?PYTHON_SITEPKG}\?%$PYTHON_SITEPKG%g" \
		fi

		if ! echo "${MODULEPATH:-}" | grep "${MODULE_INSTALL_PATH}" >/dev/null; then
			log_info ">>>"
			log_info ">>> Info: MODULE_INSTALL_PATH is not in your MODULEPATH"
			log_info ">>>       You may want to add a line like the following to your startup"
			log_info ">>>       scripts like ~/.bashrc:"
			log_info ">>>"
			log_info ">>>       export MODULEPATH=${MODULE_INSTALL_PATH}:\$MODULEPATH"
			log_info ">>>"
		else
			log_success ">>> use 'module avail' to see and e.g. 'module load ${PACKAGE}/${VERSION}' to load modules."
		fi
	else
		log_status ">>> no modulefile template found. skipping."
	fi
}
